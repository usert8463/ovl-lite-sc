const { Antispam, AntispamWarnings } = require("../../DataBase/antispam");

const messageStore = {};
const advancedSurveillance = {};

async function antispam(ovl, ms_org, ms, auteur_Message, verif_Groupe) {
  try {
    console.log("=== D√©but antispam ===");
    console.log({ ms_org, ms, auteur_Message, verif_Groupe });

    if (!verif_Groupe) {
      console.log("‚ùå verif_Groupe est faux, arr√™t de la fonction");
      return;
    }
    if (!auteur_Message) {
      console.log("‚ùå auteur_Message non d√©fini, arr√™t de la fonction");
      return;
    }

    const now = Date.now();

    // Initialisation du stockage
    if (!messageStore[ms_org]) messageStore[ms_org] = {};
    if (!messageStore[ms_org][auteur_Message]) messageStore[ms_org][auteur_Message] = [];
    const userMsgs = messageStore[ms_org][auteur_Message];

    console.log("Messages pr√©c√©dents de l'utilisateur:", userMsgs.map(m => m.id));

    // V√©rification advancedSurveillance
    const inAdvanced = advancedSurveillance[ms_org]?.[auteur_Message];
    if (inAdvanced && now - inAdvanced < 5000) {
      console.log("‚ö†Ô∏è Utilisateur en surveillance avanc√©e, suppression du message");
      try {
        await ovl.sendMessage(ms_org, { delete: { remoteJid: ms_org, fromMe: false, id: ms.key?.id, participant: auteur_Message } });
        console.log("Message supprim√© en mode advancedSurveillance:", ms.key?.id);
      } catch (e) {
        console.error("Erreur suppression advancedSurveillance:", e);
      }
      return;
    }

    // Ajout du message actuel
    if (!ms.key?.id) {
      console.log("‚ùå ms.key.id est undefined !");
    } else {
      console.log("Ajout du message √† l'historique:", ms.key.id);
      userMsgs.push({ id: ms.key.id, timestamp: now });
      if (userMsgs.length > 5) userMsgs.shift();
    }

    // R√©cup√©ration des param√®tres antispam depuis la base
    const settings = await Antispam.findOne({ where: { id: ms_org } });
    console.log("Param√®tres r√©cup√©r√©s:", settings?.dataValues);

    if (!settings) {
      console.log("‚ùå Aucun param√®tre antispam trouv√© pour ce groupe, arr√™t.");
      return;
    }

    if (settings.mode?.toLowerCase() !== "oui") {
      console.log("‚ùå Mode antispam non activ√©, arr√™t.");
      return;
    }

    if (userMsgs.length === 5) {
      const timeDiff = userMsgs[4].timestamp - userMsgs[0].timestamp;
      console.log("Temps entre le premier et le dernier message:", timeDiff, "ms");

      if (timeDiff < 25000) {
        console.log("üö® Spam d√©tect√© !");
        advancedSurveillance[ms_org] ??= {};
        advancedSurveillance[ms_org][auteur_Message] = now;

        for (const msg of userMsgs) {
          try {
            await ovl.sendMessage(ms_org, { delete: { remoteJid: ms_org, fromMe: false, id: msg.id, participant: auteur_Message } });
            console.log("Message supprim√© pour spam:", msg.id);
          } catch (e) {
            console.error("Erreur suppression message spam:", e);
          }
        }

        const username = `@${auteur_Message.split("@")[0]}`;

        try {
          switch (settings.type) {
            case "supp":
              console.log("Type d'action: suppression seulement");
              await ovl.sendMessage(ms_org, { text: `${username}, le spam est interdit ici.`, mentions: [auteur_Message] }, { quoted: ms });
              break;

            case "kick":
              console.log("Type d'action: kick");
              await ovl.sendMessage(ms_org, { text: `${username} a √©t√© retir√© pour spam.`, mentions: [auteur_Message] }, { quoted: ms });
              await ovl.groupParticipantsUpdate(ms_org, [auteur_Message], "remove");
              break;

            case "warn":
              console.log("Type d'action: avertissement");
              let warning = await AntispamWarnings.findOne({ where: { groupId: ms_org, userId: auteur_Message } });
              if (!warning) {
                console.log("Aucun avertissement existant, cr√©ation 1er avertissement");
                await AntispamWarnings.create({ groupId: ms_org, userId: auteur_Message, count: 1 });
                await ovl.sendMessage(ms_org, { text: `${username}, avertissement 1/3 pour spam.`, mentions: [auteur_Message] }, { quoted: ms });
              } else {
                warning.count += 1;
                await warning.save();
                console.log("Avertissement existant, count =", warning.count);

                if (warning.count >= 3) {
                  await ovl.sendMessage(ms_org, { text: `${username} retir√© apr√®s 3 avertissements.`, mentions: [auteur_Message] }, { quoted: ms });
                  await ovl.groupParticipantsUpdate(ms_org, [auteur_Message], "remove");
                  await warning.destroy();
                  console.log("Utilisateur retir√© apr√®s 3 avertissements");
                } else {
                  await ovl.sendMessage(ms_org, { text: `${username}, avertissement ${warning.count}/3 pour spam.`, mentions: [auteur_Message] }, { quoted: ms });
                }
              }
              break;

            default:
              console.log("‚ùå Type d'action inconnu:", settings.type);
          }
        } catch (e) {
          console.error("Erreur lors de l'action sur spam:", e);
        }

        messageStore[ms_org][auteur_Message] = userMsgs.slice(-1);
        console.log("Historique messages apr√®s traitement:", messageStore[ms_org][auteur_Message].map(m => m.id));
      }
    }

    console.log("=== Fin antispam ===");
  } catch (err) {
    console.error("Erreur dans Antispam:", err);
  }
}

module.exports = antispam;
