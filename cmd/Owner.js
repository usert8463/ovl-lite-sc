const { exec } = require("child_process");
const { ovlcmd } = require("../lib/ovlcmd");
const { Bans, OnlyAdmins } = require('../DataBase/ban');
const { Sudo } = require('../DataBase/sudo');
const config = require('../set');
const axios = require("axios");
const { Sticker, StickerTypes } = require("wa-sticker-formatter");
const cheerio = require('cheerio');
const { WA_CONF, WA_CONF2 } = require('../DataBase/wa_conf');
const { ChatbotConf } = require('../DataBase/chatbot');
const path = require('path');
const fs = require("fs");
const { saveSecondSession, getSecondAllSessions, deleteSecondSession } = require("../DataBase/connect");
const  { setMention, delMention, getMention } = require("../DataBase/mention");
const { set_stick_cmd, del_stick_cmd, get_stick_cmd } = require("../DataBase/stick_cmd");
const { set_cmd, del_cmd, list_cmd } = require("../DataBase/public_private_cmd");
const { Plugin } = require('../DataBase/plugin');
const { extractNpmModules, installModules } = require("../lib/plugin");
const { Antispam } = require("../DataBase/antispam");
const { Levelup } = require('../DataBase/rank');

ovlcmd(
  {
    nom_cmd: "delete",
    classe: "Owner",
    react: "üóëÔ∏è",
    desc: "Supprimer un message.",
    alias: ["del", "dlt"]
  },
  async (ms_org, ovl, cmd_options) => {
    const { msg_Repondu, ms, auteur_Msg_Repondu, mtype, verif_Admin, verif_Ovl_Admin, verif_Groupe, dev_num, dev_id, repondre, id_Bot, prenium_id } = cmd_options;

    if (!msg_Repondu) return repondre("Veuillez r√©pondre √† un message pour le supprimer.");

    if (dev_num.includes(auteur_Msg_Repondu) && !dev_id)
      return repondre("Vous ne pouvez pas supprimer le message d'un d√©veloppeur.");

    if (verif_Groupe) {
      if (!verif_Admin) return repondre("Vous devez √™tre administrateur pour supprimer un message dans le groupe.");
      if (!verif_Ovl_Admin) return repondre("Je dois √™tre administrateur pour effectuer cette action.");
    } else {
      if (!prenium_id) return repondre("Seuls les utilisateurs premium peuvent utiliser cette commande en priv√©.");
    }

    try {
      const key = {
        remoteJid: ms_org,
        fromMe: auteur_Msg_Repondu == id_Bot,
        id: ms.message?.[mtype]?.contextInfo?.stanzaId,
        ...(verif_Groupe && { participant: auteur_Msg_Repondu })
      };

      if (!key.id) return repondre("Impossible de trouver l'ID du message √† supprimer.");

      await ovl.sendMessage(ms_org, { delete: key });
    } catch (error) {
      repondre(`Erreur : ${error.message}`);
    }
  }
);

ovlcmd(
¬† {
¬† ¬† nom_cmd: "clear",
¬† ¬† classe: "Owner",
¬† ¬† react: "üßπ",
¬† ¬† desc: "Supprime tous les messages dans cette discussion",
¬† },
¬† async (ms_org, ovl, cmd_options) => {
¬† ¬† const { repondre, ms, prenium_id } = cmd_options;

¬† ¬† try {
¬† ¬† ¬† if (!prenium_id) {
¬† ¬† ¬† ¬† return repondre("üîí Vous n'avez pas le droit d'ex√©cuter cette commande.");
¬† ¬† ¬† }

¬† ¬† ¬† await ovl.chatModify(
¬† ¬† ¬† ¬† {
¬† ¬† ¬† ¬† ¬† delete: true,
¬† ¬† ¬† ¬† ¬† lastMessages: [
¬† ¬† ¬† ¬† ¬† ¬† {
¬† ¬† ¬† ¬† ¬† ¬† ¬† key: ms.key,
¬† ¬† ¬† ¬† ¬† ¬† ¬† messageTimestamp: ms.messageTimestamp,
¬† ¬† ¬† ¬† ¬† ¬† },
¬† ¬† ¬† ¬† ¬† ],
¬† ¬† ¬† ¬† },
¬† ¬† ¬† ¬† ms_org
¬† ¬† ¬† );

¬† ¬† ¬† await repondre("üßπ Tous les messages ont √©t√© supprim√©s avec succ√®s.");
¬† ¬† } catch (e) {
¬† ¬† ¬† console.error("Erreur lors de la suppression :", e);
¬† ¬† ¬† repondre("‚ùå Erreur lors de la suppression des messages.");
¬† ¬† }
¬† }
);

ovlcmd(
  {
    nom_cmd: "block",
    classe: "Owner",
    react: "‚õî",
    desc: "Bloquer un utilisateur par son JID"
  },
  async (ms_org, ovl, cmd_options) => {
    const { repondre, verif_Groupe, prenium_id } = cmd_options;
    
    if (verif_Groupe) {
      return repondre("Veuillez vous diriger dans l'inbox de la personne √† bloquer.");
    }
    if (!prenium_id) {
        return repondre("Vous n'avez pas le droit d'ex√©cuter cette commande.");
    }
    try {
      await ovl.updateBlockStatus(ms_org, "block");
      repondre(`‚úÖ Utilisateur bloqu√© avec succ√®s.`);
    } catch (error) {
      console.error("Erreur block:", error);
      repondre(`Impossible de bloquer l'utilisateur.`);
    }
  }
);

ovlcmd(
  {
    nom_cmd: "deblock",
    classe: "Owner",
    react: "‚úÖ",
    desc: "D√©bloquer un utilisateur par son JID"
  },
  async (ms_org, ovl, cmd_options) => {
    const { verif_Groupe, repondre, prenium_id } = cmd_options;
    
    if (verif_Groupe) {
      return repondre("Veuillez vous diriger dans l'inbox de la personne √† bloquer.");
    }
    if (!prenium_id) {
        return repondre("Vous n'avez pas le droit d'ex√©cuter cette commande.");
    }
    try {
      await ovl.updateBlockStatus(ms_org, "unblock");
      repondre(`‚úÖ Utilisateur d√©bloqu√© avec succ√®s.`);
    } catch (error) {
      console.error("Erreur deblock:", error);
      repondre(`Impossible de d√©bloquer l'utilisateur.`);
    }
  }
);

ovlcmd(
  {
    nom_cmd: "ban",
    classe: "Owner",
    react: "üö´",
    desc: "Bannir un utilisateur des commandes du bot",
  },
  async (jid, ovl, cmd_options) => {
    const { repondre, ms, arg, getJid, auteur_Msg_Repondu, prenium_id, dev_num } = cmd_options;

    try {
      if (!prenium_id) {
        return ovl.sendMessage(ms_org, { text: "Vous n'avez pas le droit d'ex√©cuter cette commande." }, { quoted: ms });
      }
      const cbl =
        auteur_Msg_Repondu || 
        (arg[0]?.includes("@") && `${arg[0].replace("@", "")}@lid`);

      const cible = await getJid(cbl, jid, ovl);
      if (!cible) return repondre("Mentionnez un utilisateur valide √† bannir.");

      if (dev_num.includes(cible)) {
      return ovl.sendMessage(jid, { text: "Vous ne pouvez pas bannir un d√©veloppeur." }, { quoted: ms });
      }
      const [ban] = await Bans.findOrCreate({
        where: { id: cible },
        defaults: { id: cible, type: "user" },
      });

      if (!ban._options.isNewRecord) return repondre("Cet utilisateur est d√©j√† banni !");
      return ovl.sendMessage(jid, { 
        text: `Utilisateur @${cible.split('@')[0]} banni avec succ√®s.`, 
        mentions: [cible]
      }, { quoted: ms });
    } catch (error) {
      console.error("Erreur lors de l'ex√©cution de la commande ban :", error);
      return repondre("Une erreur s'est produite.");
    }
  }
);

ovlcmd(
  {
    nom_cmd: "levelup",
    classe: "Owner",
    react: "‚öôÔ∏è",
    desc: "Activer ou d√©sactiver le message de level up",
  },
  async (jid, ovl, cmd_options) => {
    const { repondre, ms, arg } = cmd_options;
    try {
      if (!arg[0]) return repondre("Veuillez pr√©ciser 'on' ou 'off'.");

      const choix = arg[0].toLowerCase();
      if (choix !== 'on' && choix !== 'off') {
        return repondre("Argument invalide, utilisez 'on' ou 'off'.");
      }

      const niveau = choix === 'on' ? 'oui' : 'non';

      let record = await Levelup.findOne({ where: { id: 1 } });
      if (!record) {
        record = await Levelup.create({ id: 1, levelup: niveau });
      } else {
        record.levelup = niveau;
        await record.save();
      }

      return ovl.sendMessage(jid, {
        text: `Le message de level up est maintenant ${niveau === 'oui' ? 'activ√©' : 'd√©sactiv√©'}.`
      }, { quoted: ms });
    } catch (error) {
      console.error("Erreur commande levelup :", error);
      return repondre("Une erreur est survenue.");
    }
  }
);

ovlcmd(
  {
    nom_cmd: "anticall",
    classe: "Owner",
    react: "üìµ",
    desc: "Active ou d√©sactive le blocage automatique des appels.",
  },
  async (jid, ovl, cmd_options) => {
    const { repondre, ms, arg, prenium_id } = cmd_options;

    if (!prenium_id) {
      return ovl.sendMessage(jid, { text: "Vous n'avez pas le droit d'ex√©cuter cette commande." }, { quoted: ms });
    }

    const config = await WA_CONF2.findOne({ where: { id: "1" } });
    if (!arg[0]) {
      const status = config && config.anticall === "oui" ? "activ√©" : "d√©sactiv√©";
      return ovl.sendMessage(jid, { text: `Etat actuel de anticall : ${status}\nUsage : anticall on/off` }, { quoted: ms });
    }

    const val = arg[0].toLowerCase();
    if (val !== "on" && val !== "off") {
      return repondre("Merci d'utiliser : anticall on ou anticall off");
    }

    if (!config) {
      await WA_CONF2.create({ id: jid, anticall: val === "on" ? "oui" : "non" });
      return ovl.sendMessage(jid, { text: `anticall est maintenant ${val === "on" ? "activ√©" : "d√©sactiv√©"}.` }, { quoted: ms });
    }

    if ((val === "on" && config.anticall === "oui") || (val === "off" && config.anticall === "non")) {
      return ovl.sendMessage(jid, { text: `anticall est d√©j√† ${val === "on" ? "activ√©" : "d√©sactiv√©"}.` }, { quoted: ms });
    }

    config.anticall = val === "on" ? "oui" : "non";
    await config.save();
    return ovl.sendMessage(jid, { text: `anticall est maintenant ${val === "on" ? "activ√©" : "d√©sactiv√©"}.` }, { quoted: ms });
  }
);

ovlcmd(
  {
    nom_cmd: "autoreadmsg",
    classe: "Owner",
    react: "üìñ",
    desc: "Active ou d√©sactive la lecture automatique des messages.",
  },
  async (jid, ovl, cmd_options) => {
    const { repondre, ms, arg, prenium_id } = cmd_options;

    if (!prenium_id) {
      return ovl.sendMessage(jid, { text: "Vous n'avez pas le droit d'ex√©cuter cette commande." }, { quoted: ms });
    }

    const config = await WA_CONF2.findOne({ where: { id: "1" } });
    if (!arg[0]) {
      const status = config && config.autoread_msg === "oui" ? "activ√©" : "d√©sactiv√©";
      return ovl.sendMessage(jid, { text: `Etat actuel de autoreadmsg : ${status}\nUsage : autoreadmsg on/off` }, { quoted: ms });
    }

    const val = arg[0].toLowerCase();
    if (val !== "on" && val !== "off") {
      return repondre("Merci d'utiliser : autoreadmsg on ou autoreadmsg off");
    }

    if (!config) {
      await WA_CONF2.create({ id: jid, autoread_msg: val === "on" ? "oui" : "non" });
      return ovl.sendMessage(jid, { text: `autoreadmsg est maintenant ${val === "on" ? "activ√©" : "d√©sactiv√©"}.` }, { quoted: ms });
    }

    if ((val === "on" && config.autoread_msg === "oui") || (val === "off" && config.autoread_msg === "non")) {
      return ovl.sendMessage(jid, { text: `autoreadmsg est d√©j√† ${val === "on" ? "activ√©" : "d√©sactiv√©"}.` }, { quoted: ms });
    }

    config.autoread_msg = val === "on" ? "oui" : "non";
    await config.save();
    return ovl.sendMessage(jid, { text: `autoreadmsg est maintenant ${val === "on" ? "activ√©" : "d√©sactiv√©"}.` }, { quoted: ms });
  }
);

ovlcmd(
  {
    nom_cmd: "autoreactmsg",
    classe: "Owner",
    react: "ü§ñ",
    desc: "Active ou d√©sactive la r√©action automatique aux messages.",
  },
  async (jid, ovl, cmd_options) => {
    const { repondre, ms, arg, prenium_id } = cmd_options;

    if (!prenium_id) {
      return ovl.sendMessage(jid, { text: "Vous n'avez pas le droit d'ex√©cuter cette commande." }, { quoted: ms });
    }

    const config = await WA_CONF2.findOne({ where: { id: "1" } });
    if (!arg[0]) {
      const status = config && config.autoreact_msg === "oui" ? "activ√©" : "d√©sactiv√©";
      return ovl.sendMessage(jid, { text: `Etat actuel de autoreactmsg : ${status}\nUsage : autoreactmsg on/off` }, { quoted: ms });
    }

    const val = arg[0].toLowerCase();
    if (val !== "on" && val !== "off") {
      return repondre("Merci d'utiliser : autoreactmsg on ou autoreactmsg off");
    }

    if (!config) {
      await WA_CONF2.create({ id: jid, autoreact_msg: val === "on" ? "oui" : "non" });
      return ovl.sendMessage(jid, { text: `autoreactmsg est maintenant ${val === "on" ? "activ√©" : "d√©sactiv√©"}.` }, { quoted: ms });
    }

    if ((val === "on" && config.autoreact_msg === "oui") || (val === "off" && config.autoreact_msg === "non")) {
      return ovl.sendMessage(jid, { text: `autoreactmsg est d√©j√† ${val === "on" ? "activ√©" : "d√©sactiv√©"}.` }, { quoted: ms });
    }

    config.autoreact_msg = val === "on" ? "oui" : "non";
    await config.save();
    return ovl.sendMessage(jid, { text: `autoreactmsg est maintenant ${val === "on" ? "activ√©" : "d√©sactiv√©"}.` }, { quoted: ms });
  }
);

ovlcmd(
  {
    nom_cmd: "deban",
    classe: "Owner",
    react: "üö´",
    desc: "D√©bannir un utilisateur des commandes du bot",
  },
  async (jid, ovl, cmd_options) => {
    const { repondre, arg, getJid, auteur_Msg_Repondu, prenium_id, ms } = cmd_options;

    try {
      if (!prenium_id) {
        return ovl.sendMessage(ms_org, { text: "Vous n'avez pas le droit d'ex√©cuter cette commande." }, { quoted: ms });
      }
      const cbl =
        auteur_Msg_Repondu || 
        (arg[0]?.includes("@") && `${arg[0].replace("@", "")}@lid`);
      
       const cible = await getJid(cbl, jid, ovl);
      if (!cible) return repondre("Mentionnez un utilisateur valide √† d√©bannir.");

      const suppression = await Bans.destroy({ where: { id: cible, type: "user" } });
      if (suppression === 0) return repondre("Cet utilisateur n'est pas banni.");
      return ovl.sendMessage(jid, { 
        text: `Utilisateur @${cible.split('@')[0]} d√©banni avec succ√®s.`, 
        mentions: [cible]
      }, { quoted: ms });
    } catch (error) {
      console.error("Erreur lors de l'ex√©cution de la commande debannir :", error);
      return repondre("Une erreur s'est produite.");
    }
  }
);

ovlcmd(
  {
    nom_cmd: "bangroup",
    classe: "Owner",
    react: "üö´",
    desc: "Bannir un groupe des commandes du bot",
  },
  async (jid, ovl, cmd_options) => {
    const { repondre, arg, verif_Groupe, prenium_id, ms } = cmd_options;

    try {
      if (!prenium_id) {
        return ovl.sendMessage(ms_org, { text: "Vous n'avez pas le droit d'ex√©cuter cette commande." }, { quoted: ms });
      }
      if (!verif_Groupe) return repondre("Cette commande fonctionne uniquement dans les groupes.");

      const cible = jid;

      if (!cible) return repondre("Impossible de r√©cup√©rer l'identifiant du groupe.");

      const [ban] = await Bans.findOrCreate({
        where: { id: cible },
        defaults: { id: cible, type: "group" },
      });

      if (!ban._options.isNewRecord) return repondre("Ce groupe est d√©j√† banni !");
      return repondre(`Groupe banni avec succ√®s.`);
    } catch (error) {
      console.error("Erreur lors de l'ex√©cution de la commande bangroup :", error);
      return repondre("Une erreur s'est produite.");
    }
  }
);

ovlcmd(
  {
    nom_cmd: "debangroup",
    classe: "Owner",
    react: "üö´",
    desc: "D√©bannir un groupe des commandes du bot",
  },
  async (jid, ovl, cmd_options) => {
    const { repondre, arg, verif_Groupe, prenium_id, ms } = cmd_options;

    try {
      if (!prenium_id) {
        return ovl.sendMessage(ms_org, { text: "Vous n'avez pas le droit d'ex√©cuter cette commande." }, { quoted: ms });
      }
      if (!verif_Groupe) return repondre("Cette commande fonctionne uniquement dans les groupes.");

      const cible = jid;

      if (!cible) return repondre("Impossible de r√©cup√©rer l'identifiant du groupe.");

      const suppression = await Bans.destroy({ where: { id: cible, type: "group" } });
      if (suppression === 0) return repondre("Ce groupe n'est pas banni.");
      return repondre(`Groupe d√©banni avec succ√®s.`);
    } catch (error) {
      console.error("Erreur lors de l'ex√©cution de la commande debangroup :", error);
      return repondre("Une erreur s'est produite.");
    }
  }
);

ovlcmd(
  {
    nom_cmd: "onlyadmins",
    react: "üõ°Ô∏è",
    desc: "Activer ou d√©sactiver le mode only-admins dans un groupe",
    classe: "Owner",
  },
  async (ms_org, ovl, cmd_options) => {
    const { repondre, arg, verif_Groupe, ms, prenium_id } = cmd_options;

    try {
      if (!verif_Groupe) return repondre("‚ùå Cette commande ne fonctionne que dans un groupe.");

      if (!prenium_id) {
        return ovl.sendMessage(ms_org, { text: "‚õî Vous n'avez pas l'autorisation d'ex√©cuter cette commande." }, { quoted: ms });
      }

      const mode = arg[0]?.toLowerCase();

      if (!["add", "del"].includes(mode)) {
        return repondre("‚ùì Utilisation : `onlyadmins add` pour activer, `onlyadmins del` pour d√©sactiver.");
      }

      const groupId = ms_org;
      const existing = await OnlyAdmins.findOne({ where: { id: groupId } });

      if (mode === "add") {
        if (existing) {
          return repondre("‚ö†Ô∏è Le mode only-admin est **d√©j√† activ√©** pour ce groupe.");
        }

        await OnlyAdmins.create({ id: groupId });
        return repondre("‚úÖ Mode only-admin **activ√©** pour ce groupe.");
      }

      if (mode === "del") {
        if (!existing) {
          return repondre("‚ö†Ô∏è Ce groupe **n'√©tait pas en mode only-admin**.");
        }

        await OnlyAdmins.destroy({ where: { id: groupId } });
        return repondre("‚ùå Mode only-admin **d√©sactiv√©** pour ce groupe.");
      }

    } catch (err) {
      console.error("Erreur onlyadmins:", err);
      return repondre("‚ùå Une erreur s'est produite. Veuillez r√©essayer.");
    }
  }
);

 ovlcmd(
  {
    nom_cmd: "setsudo",
    classe: "Owner",
    react: "üîí",
    desc: "Ajoute un utilisateur dans la liste des utilisateurs premium.",
  },
  async (ms_org, ovl, cmd_options) => {
    const { repondre, arg, getJid, auteur_Msg_Repondu, prenium_id, ms } = cmd_options;

    if (!prenium_id) {
      return ovl.sendMessage(ms_org, { text: "Vous n'avez pas le droit d'ex√©cuter cette commande." }, { quoted: ms });
    }
    const cbl =
      auteur_Msg_Repondu ||
      (arg[0]?.includes("@") && `${arg[0].replace("@", "")}@lid`);
 
    const cible = await getJid(cbl, ms_org, ovl);
    if (!cible) {
      return repondre("Veuillez mentionner un utilisateur valide pour l'ajouter en premium.");
    }

    try {
      const [user] = await Sudo.findOrCreate({
        where: { id: cible },
        defaults: { id: cible },
      });

      if (!user._options.isNewRecord) {
        return ovl.sendMessage(ms_org, { 
        text: `L'utilisateur @${cible.split('@')[0]} est d√©j√† un utilisateur premium.`, 
        mentions: [cible]
      }, { quoted: ms });
      }

      return ovl.sendMessage(ms_org, { 
        text: `Utilisateur @${cible.split('@')[0]} ajout√© avec succ√®s en tant qu'utilisateur premium.`, 
        mentions: [cible]
      }, { quoted: ms });
      } catch (error) {
      console.error("Erreur lors de l'ex√©cution de la commande setsudo :", error);
      return repondre("Une erreur est survenue lors de l'ajout de l'utilisateur en premium.");
    }
  }
);

ovlcmd(
  {
    nom_cmd: "sudolist",
    classe: "Owner",
    react: "üìã",
    desc: "Affiche la liste des utilisateurs premium.",
  },
  async (ms_org, ovl, cmd_options) => {
    const { repondre, prenium_id, ms } = cmd_options;

    if (!prenium_id) {
      return ovl.sendMessage(ms_org, { text: "Vous n'avez pas la permission d'ex√©cuter cette commande." }, { quoted: ms });
    }

    try {
      const sudoUsers = await Sudo.findAll();

      if (!sudoUsers.length) {
        return repondre("Aucun utilisateur premium n'est actuellement enregistr√©.");
      }

      const userList = sudoUsers
        .map((user, index) => `üîπ *${index + 1}.* @${user.id.split('@')[0]}`)
        .join("\n");

      const message = `‚ú® *Liste des utilisateurs Premium* ‚ú®\n\n*Total*: ${sudoUsers.length}\n\n${userList}`;

      return ovl.sendMessage(ms_org, { text: message, mentions: sudoUsers.map(user => user.id) }, { quoted: ms });
    } catch (error) {
      console.error("Erreur lors de l'ex√©cution de la commande sudolist :", error);
      return repondre("Une erreur est survenue lors de l'affichage de la liste des utilisateurs premium.");
    }
  }
);

ovlcmd(
  {
    nom_cmd: "delsudo",
    classe: "Owner",
    react: "‚ùå",
    desc: "Supprime un utilisateur de la liste des utilisateurs premium.",
  },
  async (ms_org, ovl, cmd_options) => {
    const { repondre, getJid, arg, auteur_Msg_Repondu, prenium_id, ms } = cmd_options;
    
    if (!prenium_id) {
      return ovl.sendMessage(ms_org, { text: "Vous n'avez pas le droit d'ex√©cuter cette commande." }, { quoted: ms });
    }

    const cbl =
      auteur_Msg_Repondu ||
      (arg[0]?.includes("@") && `${arg[0].replace("@", "")}@lid`);
    const cible = await getJid(cbl, ms_org, ovl);
    if (!cible) {
      return repondre("Veuillez mentionner un utilisateur");
    }

    try {
      const deletion = await Sudo.destroy({ where: { id: cible } });

      if (deletion === 0) {
        return ovl.sendMessage(ms_org, { 
        text: `L'utilisateur @${cible.split('@')[0]} n'est pas un utilisateur premium.`, 
        mentions: [cible]
      }, { quoted: ms });
      }

        return ovl.sendMessage(ms_org, { 
        text: `Utilisateur @${cible.split('@')[0]} supprim√© avec succ√®s de la liste premium.`, 
        mentions: [cible]
      }, { quoted: ms });
    } catch (error) {
      console.error("Erreur lors de l'ex√©cution de la commande delsudo :", error);
      return repondre("Une erreur est survenue lors de la suppression de l'utilisateur de la liste premium.");
    }
  }
);

ovlcmd(
¬† ¬† {
¬† ¬† ¬† ¬† nom_cmd: "tgs",
¬† ¬† ¬† ¬† classe: "Owner",
¬† ¬† ¬† ¬† react: "üîç",
¬† ¬† ¬† ¬† desc: "Importe des stickers Telegram sur WhatsApp",
¬† ¬† },
¬† ¬† async (ms_org, ovl, cmd_options) => {
¬† ¬† ¬† ¬† const { repondre, arg, prenium_id, ms } = cmd_options;

¬† ¬† ¬† ¬† if (!prenium_id) {
¬† ¬† ¬† ¬† ¬† ¬† return ovl.sendMessage(ms_org, { text: "‚ùå Vous n'avez pas le droit d'ex√©cuter cette commande." });
¬† ¬† ¬† ¬† }

¬† ¬† ¬† ¬† if (!arg[0]) {
¬† ¬† ¬† ¬† ¬† ¬† return repondre("Merci de fournir un lien de stickers Telegram valide.");
¬† ¬† ¬† ¬† }

¬† ¬† ¬† ¬† const lien = arg[0];
¬† ¬† ¬† ¬† const nomStickers = lien.split("/addstickers/")[1];

¬† ¬† ¬† ¬† if (!nomStickers) {
¬† ¬† ¬† ¬† ¬† ¬† return repondre("‚ùå Lien incorrect.");
¬† ¬† ¬† ¬† }

¬† ¬† ¬† ¬† const TELEGRAM_TOKEN = "8408302436:AAFAKAtwCOywhSW0vqm9VNK71huTi8pUp1k";
¬† ¬† ¬† ¬† const urlAPI = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/getStickerSet?name=${nomStickers}`;

¬† ¬† ¬† ¬† try {
¬† ¬† ¬† ¬† ¬† ¬† const { data } = await axios.get(urlAPI);
¬† ¬† ¬† ¬† ¬† ¬† const stickers = data.result.stickers;

¬† ¬† ¬† ¬† ¬† ¬† if (!stickers || stickers.length === 0) {
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† return repondre("Aucun sticker trouv√© dans cet ensemble.");
¬† ¬† ¬† ¬† ¬† ¬† }

¬† ¬† ¬† ¬† ¬† ¬† repondre(`‚úÖ Nom du pack: ${data.result.name}\nType : ${data.result.is_animated ? "anim√©s" : "statiques"}\nTotal : ${stickers.length} stickers\n`);

¬† ¬† ¬† ¬† ¬† ¬† for (const stickerData of stickers) {
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† const fileInfo = await axios.get(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/getFile?file_id=${stickerData.file_id}`);
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† const stickerBuffer = await axios({
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† method: "get",
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† url: `https://api.telegram.org/file/bot${TELEGRAM_TOKEN}/${fileInfo.data.result.file_path}`,
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† responseType: "arraybuffer",
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† });

¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† const sticker = new Sticker(stickerBuffer.data, {
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† pack: config.STICKER_PACK_NAME,
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† author: config.STICKER_AUTHOR_NAME,
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† type: StickerTypes.FULL,
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† quality: 40
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† });

¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† await ovl.sendMessage(ms_org, {
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† sticker: await sticker.toBuffer(),
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† }, { quoted: ms });
¬† ¬† ¬† ¬† ¬† ¬† }

¬† ¬† ¬† ¬† ¬† ¬† repondre("‚úÖ Tous les stickers ont √©t√© envoy√©s.");
¬† ¬† ¬† ¬† } catch (error) {
¬† ¬† ¬† ¬† ¬† ¬† console.error(error);
¬† ¬† ¬† ¬† ¬† ¬† repondre("‚ùå Une erreur s'est produite lors du t√©l√©chargement des stickers.");
¬† ¬† ¬† ¬† }
¬† ¬† }
);

ovlcmd(
  {
    nom_cmd: "fetch_sc",
    classe: "Owner",
    react: "üíª",
    desc: "Extrait les donn√©es d'une page web, y compris HTML, CSS, JavaScript et m√©dias",
  },
  async (ms_org, ovl, cmd_options) => {
    const { arg, prenium_id, ms } = cmd_options;
    const lien = arg[0];
if (!prenium_id) {
      return ovl.sendMessage(ms_org, { text: "Vous n'avez pas le droit d'ex√©cuter cette commande." }, { quoted: ms });
}
    if (!lien) {
      return ovl.sendMessage(ms_org, { text: "Veuillez fournir un lien valide. Le bot extraira le HTML, CSS, JavaScript, et les m√©dias de la page web." }, { quoted: ms });
    }

    if (!/^https?:\/\//i.test(lien)) {
      return ovl.sendMessage(ms_org, { text: "Veuillez fournir une URL valide commen√ßant par http:// ou https://" }, { quoted: ms });
    }

    try {
      const response = await axios.get(lien);
      const html = response.data;
      const $ = cheerio.load(html);

      const fichiersMedia = [];
      $('img[src], video[src], audio[src]').each((i, element) => {
        let src = $(element).attr('src');
        if (src) fichiersMedia.push(src);
      });

      const fichiersCSS = [];
      $('link[rel="stylesheet"]').each((i, element) => {
        let href = $(element).attr('href');
        if (href) fichiersCSS.push(href);
      });

      const fichiersJS = [];
      $('script[src]').each((i, element) => {
        let src = $(element).attr('src');
        if (src) fichiersJS.push(src);
      });

      await ovl.sendMessage(ms_org, { text: `**Contenu HTML**:\n\n${html}` }, { quoted: ms });

      if (fichiersCSS.length > 0) {
        for (const fichierCSS of fichiersCSS) {
          const cssResponse = await axios.get(new URL(fichierCSS, lien));
          const cssContent = cssResponse.data;
          await ovl.sendMessage(ms_org, { text: `**Contenu du fichier CSS**:\n\n${cssContent}` }, { quoted: ms });
        }
      } else {
        await ovl.sendMessage(ms_org, { text: "Aucun fichier CSS externe trouv√©." }, { quoted: ms });
      }

      if (fichiersJS.length > 0) {
        for (const fichierJS of fichiersJS) {
          const jsResponse = await axios.get(new URL(fichierJS, lien));
          const jsContent = jsResponse.data;
          await ovl.sendMessage(ms_org, { text: `**Contenu du fichier JavaScript**:\n\n${jsContent}` }, { quoted: ms });
        }
      } else {
        await ovl.sendMessage(ms_org, { text: "Aucun fichier JavaScript externe trouv√©." }, { quoted: ms });
      }

      if (fichiersMedia.length > 0) {
        await ovl.sendMessage(ms_org, { text: `**Fichiers m√©dias trouv√©s**:\n${fichiersMedia.join('\n')}` }, { quoted: ms });
      } else {
        await ovl.sendMessage(ms_org, { text: "Aucun fichier m√©dia (images, vid√©os, audios) trouv√©." }, { quoted: ms });
      }

    } catch (error) {
      console.error(error);
      return ovl.sendMessage(ms_org, { text: "Une erreur est survenue lors de l'extraction du contenu de la page web." }, { quoted: ms });
    }
  }
);

ovlcmd(
  {
    nom_cmd: "antidelete",
    classe: "Owner",
    react: "üîó",
    desc: "Configure ou d√©sactive l'Antidelete",
  },
  async (jid, ovl, cmd_options) => {
    const { ms, repondre, arg, prenium_id } = cmd_options;

    try {
      if (!prenium_id) return repondre("üîí Cette commande est r√©serv√©e aux utilisateurs premium.");

      const sousCommande = arg[0]?.toLowerCase();
      const mode = arg[1]?.toLowerCase();

      const validTypes = {
        1: 'pm',
        2: 'gc',
        3: 'status',
        4: 'all',
        5: 'pm/gc',
        6: 'pm/status',
        7: 'gc/status'
      };

      const [settings] = await WA_CONF.findOrCreate({
        where: { id: '1' },
        defaults: { id: '1', antidelete: 'non' },
      });

      if (sousCommande === 'off') {
        if (settings.antidelete === 'non')
          return repondre("‚ùå L'antidelete est d√©j√† d√©sactiv√©.");
        settings.antidelete = 'non';
        await settings.save();
        return repondre("‚úÖ Antidelete d√©sactiv√© avec succ√®s.");
      }

      if (['pv', 'org'].includes(sousCommande)) {
        return repondre("‚ùå Usage invalide.\nUtilisez : antidelete <num√©ro> [pv|org]\nExemple : antidelete 3 org");
      }

      const typeSelection = parseInt(sousCommande);
      if (!validTypes[typeSelection]) {
        return repondre(
          "üìå *Utilisation de la commande antidelete :*\n\n" +
          "üîπ antidelete off : D√©sactiver l'antidelete\n\n" +
          "üîπ antidelete 1 : Activer sur les messages priv√©s (pm)\n" +
          "üîπ antidelete 2 : Activer sur les messages de groupe (gc)\n" +
          "üîπ antidelete 3 : Activer sur les statuts (status)\n" +
          "üîπ antidelete 4 : Activer sur tous les types (all)\n" +
          "üîπ antidelete 5 : Activer sur pm + gc\n" +
          "üîπ antidelete 6 : Activer sur pm + status\n" +
          "üîπ antidelete 7 : Activer sur gc + status\n\n" +
          "‚ûï Vous pouvez ajouter `pv` ou `org` apr√®s le num√©ro pour choisir o√π renvoyer le message supprim√©.\n" +
          "   Exemple : `antidelete 3 org`\n\n" +
          "‚ú≥Ô∏è Par d√©faut, si rien n‚Äôest pr√©cis√©, c‚Äôest `pv` (inbox) qui est utilis√©."
        );
      }

      if (mode && !['pv', 'org'].includes(mode)) {
        return repondre("‚ùå Mode invalide. Utilisez soit 'pv' soit 'org' apr√®s le num√©ro.");
      }

      let finalSetting = validTypes[typeSelection];
      if (mode) finalSetting += `-${mode}`;
      else finalSetting += '-pv';

      if (settings.antidelete === finalSetting) {
        return repondre(`‚ö†Ô∏è L'antidelete est d√©j√† configur√© sur '${finalSetting}'.`);
      }

      settings.antidelete = finalSetting;
      await settings.save();
      return repondre(`‚úÖ Antidelete configur√© sur : *${finalSetting}*`);

    } catch (error) {
      console.error("Erreur antidelete :", error);
      repondre("‚ùå Une erreur s'est produite lors de la configuration de l'antidelete.");
    }
  }
);

ovlcmd(
  {
    nom_cmd: "antispam",
    classe: "Groupe",
    react: "üîó",
    desc: "Active ou configure l'antispam pour les groupes",
  },
  async (jid, ovl, cmd_options) => {
    const { repondre, arg, prenium_id } = cmd_options;

    try {

      if (!prenium_id) {
      return repondre("Seuls les utilisateurs prenium peuvent utiliser cette commande");
      }

      const sousCommande = arg[0]?.toLowerCase();
      const validModes = ["on", "off"];
      const validTypes = ["supp", "warn", "kick"];

      const [settings] = await Antispam.findOrCreate({
        where: { id: jid },
        defaults: { id: jid, mode: "non", type: "supp" },
      });

      if (validModes.includes(sousCommande)) {
        const newMode = sousCommande === "on" ? "oui" : "non";
        if (settings.mode === newMode) {
          return repondre(`L'Antispam est d√©j√† ${sousCommande}.`);
        }
        settings.mode = newMode;
        await settings.save();
        return repondre(`L'Antispam a √©t√© ${sousCommande === "on" ? "activ√©" : "d√©sactiv√©"} avec succ√®s !`);
      }

      if (validTypes.includes(sousCommande)) {
        if (settings.mode !== "oui") {
          return repondre("‚ùå Veuillez activer l'antispam d'abord avec `antispam on`.");
        }
        if (settings.type === sousCommande) {
          return repondre(`‚ö†Ô∏è L'action antispam est d√©j√† d√©finie sur ${sousCommande}.`);
        }
        settings.type = sousCommande;
        await settings.save();
        return repondre(`‚úÖ L'action antispam est maintenant d√©finie sur ${sousCommande}.`);
      }

      return repondre(
        "Utilisation :\n" +
        "antispam on/off : Activer ou d√©sactiver l'antispam.\n" +
        "antispam supp/warn/kick : Configurer l'action antispam."
      );
    } catch (error) {
      console.error("Erreur lors de la configuration d'antispam :", error);
      return repondre("‚ùå Une erreur s'est produite lors de l'ex√©cution de la commande.");
    }
  }
);

ovlcmd(
  {
    nom_cmd: "jid",
    classe: "Owner",
    react: "üÜî",
    desc: "fournit le jid d'une personne ou d'un groupe",
  },  
  async (ms_org, ovl, cmd_options) => {
    const { repondre, auteur_Msg_Repondu, prenium_id, msg_Repondu } = cmd_options;

    if (!prenium_id) {
      return repondre("Seuls les utilisateurs prenium peuvent utiliser cette commande");
    }

    let jid;

    if (!msg_Repondu) {
      jid = ms_org;
    } else {
      jid = auteur_Msg_Repondu;
    }

    repondre(jid);
  }
);

ovlcmd(
    {
        nom_cmd: "restart",
        classe: "Owner",
        desc: "Red√©marre le bot via PM2"
    },
    async (ms_org, ovl, opt) => {
        const { ms, prenium_id } = opt;

        if (!prenium_id) {
            return ovl.sendMessage(ms_org, { text: "Vous n'avez pas la permission d'utiliser cette commande." }, { quoted: ms });
        }

        await ovl.sendMessage(ms_org, { text: "‚ôªÔ∏è Red√©marrage du bot en cours..." }, { quoted: ms });

        exec('pm2 restart all', (err, stdout, stderr) => {
            if (err) {
                return ovl.sendMessage(ms_org, { text: `Erreur lors du red√©marrage :\n${err.message}` }, { quoted: ms });
            }
        });
    }
);

ovlcmd(
  {
    nom_cmd: "connect",
    classe: "Owner",
    desc: "Connexion d‚Äôun compte avec le bot via session_id",
  },
  async (ms_org, ovl, cmd_options) => {
    try {
      const { arg, ms, prenium_id, repondre } = cmd_options;

      if (!prenium_id) {
        return ovl.sendMessage(ms_org, { text: "üö´ Vous n'avez pas le droit d'ex√©cuter cette commande." }, { quoted: ms });
      }

      if (!arg || !arg[0]) {
        return ovl.sendMessage(ms_org, { text: "‚ùó Exemple : .connect SESSION_ID" }, { quoted: ms });
      }

      const session_id = arg[0].trim();
      console.log(`üåÄ Tentative de connexion par ${ms.sender} pour session_id: ${session_id}`);

      const result = await saveSecondSession(session_id);
      if (!result) {
        return repondre("‚ùå La session est invalide ou n‚Äôa pas pu √™tre enregistr√©e.");
      }

      return ovl.sendMessage(ms_org, { text: `‚úÖ Tentative de connexion enregistr√©e pour la session : ${session_id}` }, { quoted: ms });

    } catch (err) {
      return ovl.sendMessage(ms_org, { text: `‚ùå Erreur : ${err.message}` });
    }
  }
);

ovlcmd(
  {
    nom_cmd: "connect_session",
    classe: "Owner",
    desc: "Affiche la liste des num√©ros connect√©s",
  },
  async (ms_org, ovl, cmd_options) => {
    try {
      const { ms, prenium_id } = cmd_options;

      if (!prenium_id) {
        return ovl.sendMessage(ms_org, {
          text: "Vous n'avez pas le droit d'ex√©cuter cette commande.",
        }, { quoted: ms });
      }

      const sessions = await getSecondAllSessions();

      if (!sessions || sessions.length === 0) {
        return ovl.sendMessage(ms_org, {
          text: "üì≠ Aucune session secondaire active pour le moment.",
        }, { quoted: ms });
      }

      const jids = sessions.map(s => `${s.numero}@s.whatsapp.net`);
      const texte = jids.map(jid => `@${jid.split("@")[0]}`).join("\n");

      await ovl.sendMessage(ms_org, {
        text: `üì° *Sessions secondaires connect√©es (${sessions.length})* :\n\n${texte}`,
        mentions: jids,
      }, { quoted: ms });
    } catch (err) {
      return ovl.sendMessage(ms_org, { text: `‚ùå Erreur : ${err.message}` });
    }
  }
);

ovlcmd(
  {
    nom_cmd: "disconnect",
    classe: "Owner",
    desc: "Supprime une session connect√©e par session_id",
  },
  async (ms_org, ovl, cmd_options) => {
    try {
      const { arg, ms, prenium_id } = cmd_options;

      if (!prenium_id) {
        return ovl.sendMessage(ms_org, {
          text: "Vous n'avez pas le droit d'ex√©cuter cette commande.",
        }, { quoted: ms });
      }

      if (!arg || !arg[0]) {
        return ovl.sendMessage(ms_org, {
          text: "Usage : .disconnect numero(sans le + et coll√©)",
        }, { quoted: ms });
      }

      const numero = arg[0].trim();
      const result = await deleteSecondSession(numero);

      if (result === 0) {
        return ovl.sendMessage(ms_org, {
          text: `Aucune session trouv√©e pour le num√©ro : ${numero}`,
        }, { quoted: ms });
      }

      await ovl.sendMessage(ms_org, {
        text: `‚úÖ Session pour le num√©ro: ${numero} supprim√©e avec succ√®s.`,
      }, { quoted: ms });
    } catch (err) {
      return ovl.sendMessage(ms_org, { text: `‚ùå Erreur : ${err.message}` });
    }
  }
);

ovlcmd(
  {
    nom_cmd: "setmention",
    classe: "Owner",
    react: "‚úÖ",
    desc: "Configurer le message d'antimention global",
  },
  async (jid, ovl, cmd_options) => {
    const { ms, repondre, arg, prenium_id } = cmd_options;

    if (!prenium_id) return repondre("‚ùå Seuls les utilisateurs premium peuvent utiliser cette commande.");

    try {
      const joined = arg.join(" ");
      if (!joined) {
        return repondre(
          `üõ†Ô∏è Utilisation de la commande *setmention* :

1Ô∏è‚É£ Pour une image, vid√©o, audio ou texte avec type sp√©cifi√© :
> *setmention type=audio url=https://exemple.com/fichier.opus*
> *setmention type=video url=https://exemple.com/video.mp4 text=Votre message ici*
> *setmention type=texte text=Votre message ici*
> *setmention type=image url=https://exemple.com/image.jpg text=Votre message ici*

üìå Les types valides sont : audio, video, texte, image.`
        );
      }

      const parts = joined.split("&").map(p => p.trim());
      let url = "";
      let text = "";
      let type = "";

      for (const part of parts) {
        if (part.startsWith("url=")) url = part.replace("url=", "").trim();
        else if (part.startsWith("text=")) text = part.replace("text=", "").trim();
        else if (part.startsWith("type=")) type = part.replace("type=", "").trim().toLowerCase();
      }

      if (!type) return repondre("‚ùå Vous devez pr√©ciser le type avec 'type=audio', 'type=video', 'type=texte' ou 'type=image'.");

      await setMention({ url, text, type, mode: "oui" });

      return repondre(`‚úÖ Mention de type '${type}' enregistr√©e avec succ√®s.`);
    } catch (e) {
      console.error("Erreur dans setmention:", e);
      repondre("Une erreur s'est produite lors de la configuration.");
    }
  }
);

ovlcmd(
  {
    nom_cmd: "delmention",
    classe: "Owner",
    react: "üö´",
    desc: "D√©sactiver le syst√®me d'antimention",
  },
  async (jid, ovl, cmd_options) => {
    const { repondre, prenium_id } = cmd_options;

    if (!prenium_id) return repondre("Seuls les utilisateurs premium peuvent utiliser cette commande.");

    try {
      await delMention();
      return repondre("‚úÖ mention d√©sactiv√©.");
    } catch (e) {
      console.error("Erreur dans delmention:", e);
      repondre("Une erreur s'est produite.");
    }
  }
);

ovlcmd(
  {
    nom_cmd: "getmention",
    classe: "Owner",
    react: "üìÑ",
    desc: "Afficher la configuration actuelle de l'antimention",
  },
  async (jid, ovl, cmd_options) => {
    const { repondre, prenium_id } = cmd_options;

    try {
      if (!prenium_id) return repondre("Seuls les utilisateurs premium peuvent utiliser cette commande.");

      const data = await getMention();

      if (!data || data.mode === "non") {
        return repondre("‚ÑπÔ∏è Antimention d√©sactiv√© ou non configur√©.");
      }

      const { mode, url, text, type } = data;

      if ((!url || url === "") && (!text || text === "")) {
        return repondre("‚ÑπÔ∏è Antimention activ√© mais aucun contenu d√©fini.");
      }

      switch (type) {
        case "audio":
          if (!url) return repondre(text || "Aucun contenu audio d√©fini.");
          return await ovl.sendMessage(jid, {
            audio: { url },
            mimetype: 'audio/mp4',
            ptt: true,
          }, { quoted: null });

        case "image":
          if (!url) return repondre(text || "Aucun contenu image d√©fini.");
          return await ovl.sendMessage(jid, {
            image: { url },
            caption: text || undefined,
          }, { quoted: null });

        case "video":
          if (!url) return repondre(text || "Aucun contenu vid√©o d√©fini.");
          return await ovl.sendMessage(jid, {
            video: { url },
            caption: text || undefined,
          }, { quoted: null });

        case "texte":
          return repondre(text || "Aucun message texte d√©fini.");

        default:
          return repondre("Le type de m√©dia est inconnu ou non pris en charge.");
      }

    } catch (e) {
      console.error("Erreur dans getmention:", e);
      repondre("Impossible d'afficher la configuration.");
    }
  }
);

ovlcmd({
  nom_cmd: "addstickcmd",
  classe: "Owner",
  react: "‚ú®",
  desc: "Associer une commande √† un sticker (r√©ponds √† un sticker)",
}, async (ms_org, ovl, { repondre, msg_Repondu, arg, prenium_id }) => {
  if (!prenium_id) return repondre("Pas autoris√©.");

  const name = arg[0];
  if (!name) return repondre("Tu dois donner un nom √† la commande.\nExemple : \`addstickcmd test\`");

  if (!msg_Repondu || !msg_Repondu.stickerMessage || !msg_Repondu.stickerMessage.url)
    return repondre("Tu dois r√©pondre √† un *sticker* pour l'enregistrer.");

  const stick_url = msg_Repondu.stickerMessage.url;

  try {
    await set_stick_cmd(name.toLowerCase(), stick_url);
    repondre(`‚úÖ Le sticker a √©t√© associ√© √† la commande *${name}*`);
  } catch (e) {
    console.error(e);
    repondre("Erreur lors de l'enregistrement.");
  }
});

ovlcmd({
  nom_cmd: "delstickcmd",
  classe: "Owner",
  react: "üóëÔ∏è",
  desc: "Supprimer une commande sticker",
}, async (ms_org, ovl, { repondre, arg, prenium_id }) => {
  if (!prenium_id) return repondre("Pas autoris√©.");

  const name = arg[0];
  if (!name) return repondre("Exemple : \`delstickcmd test\`");

  const ok = await del_stick_cmd(name.toLowerCase());
  repondre(ok ? `üóëÔ∏è La commande *${name}* a √©t√© supprim√©e.` : `Aucune commande nomm√©e *${name}* trouv√©e.`);
});

ovlcmd({
  nom_cmd: "getstickcmd",
  classe: "Owner",
  react: "üìã",
  desc: "Liste des commandes stickers",
}, async (ms_org, ovl, { repondre, prenium_id }) => {
  if (!prenium_id) return repondre("Pas autoris√©.");

  const list = await get_stick_cmd();
  if (!list.length) return repondre("Aucune commande sticker trouv√©e.");

  let msg = "*üìå Liste des commandes stickers :*\n\n";
  for (const { no_cmd, stick_url } of list) {
    msg += `‚Ä¢ *${no_cmd}*\n`;
  }

  repondre(msg);
});

ovlcmd({
  nom_cmd: "setpublic_cmd",
  classe: "Owner",
  react: "‚úÖ",
  desc: "Ajoute une commande publique utilisable par tout le monde quand le bot est en mode priv√©",
}, async (ms_org, ovl, { arg, repondre, prenium_id }) => {
  if (!prenium_id) return repondre("‚ùå Vous n'avez pas la permission d'ex√©cuter cette commande.");

  const nom_cmd = arg[0];
  if (!nom_cmd) return repondre("‚ùå Utilisation: setpublic_cmd nom_cmd");

  try {
    await set_cmd(nom_cmd, "public");
    repondre(`‚úÖ Commande publique '${nom_cmd}' enregistr√©e.`);
  } catch {
    repondre("‚ùå Erreur lors de l'enregistrement.");
  }
});

ovlcmd({
  nom_cmd: "delpublic_cmd",
  classe: "Owner",
  react: "üóëÔ∏è",
  desc: "Supprime une commande des commandes publiques.",
}, async (ms_org, ovl, { arg, repondre, prenium_id }) => {
  if (!prenium_id) return repondre("‚ùå Vous n'avez pas la permission d'ex√©cuter cette commande.");

  const nom_cmd = arg[0];
  if (!nom_cmd) return repondre("‚ùå Utilisation: delpublic_cmd nom_cmd");

  try {
    const deleted = await del_cmd(nom_cmd, "public");
    repondre(deleted ? `‚úÖ Commande '${nom_cmd}' supprim√©e.` : `‚ùå Commande '${nom_cmd}' introuvable.`);
  } catch {
    repondre("‚ùå Erreur lors de la suppression.");
  }
});

ovlcmd({
  nom_cmd: "listpublic_cmd",
  classe: "Owner",
  react: "üìú",
  desc: "Liste les commandes publiques utilisablent quand le bot est en mode priv√©",
}, async (ms_org, ovl, { repondre, prenium_id }) => {
  if (!prenium_id) return repondre("‚ùå Vous n'avez pas la permission d'ex√©cuter cette commande.");

  const all = await list_cmd("public");
  if (!all.length) return repondre("‚ùå Aucune commande publique enregistr√©e.");

  const msg = all.map((c, i) => `üîπ *${i + 1}.* ${c.nom_cmd}`).join("\n");
  repondre(`üìñ *Commandes publiques enregistr√©es :*\n\n${msg}`);
});

ovlcmd({
  nom_cmd: "setprivate_cmd",
  classe: "Owner",
  react: "üîí",
  desc: "Ajoute une commande priv√©e utilisable par les utilisateurs premiums quand le bot est en mode public",
}, async (ms_org, ovl, { arg, repondre, prenium_id }) => {
  if (!prenium_id) return repondre("‚ùå Vous n'avez pas la permission d'ex√©cuter cette commande.");

  const nom_cmd = arg[0];
  if (!nom_cmd) return repondre("‚ùå Utilisation: setprivate_cmd nom_cmd");

  try {
    await set_cmd(nom_cmd, "private");
    repondre(`üîê Commande priv√©e '${nom_cmd}' enregistr√©e.`);
  } catch {
    repondre("‚ùå Erreur lors de l'enregistrement.");
  }
});

ovlcmd({
  nom_cmd: "delprivate_cmd",
  classe: "Owner",
  react: "üóëÔ∏è",
  desc: "Supprime une commande des commandes priv√©e"
}, async (ms_org, ovl, { arg, repondre, prenium_id }) => {
  if (!prenium_id) return repondre("‚ùå Vous n'avez pas la permission d'ex√©cuter cette commande.");

  const nom_cmd = arg[0];
  if (!nom_cmd) return repondre("‚ùå Utilisation: delprivate_cmd nom_cmd");

  try {
    const deleted = await del_cmd(nom_cmd, "private");
    repondre(deleted ? `‚úÖ Commande '${nom_cmd}' supprim√©e.` : `‚ùå Commande '${nom_cmd}' introuvable.`);
  } catch {
    repondre("‚ùå Erreur lors de la suppression.");
  }
});

ovlcmd({
  nom_cmd: "listprivate_cmd",
  classe: "Owner",
  react: "üìÉ",
  desc: "Liste les commandes priv√©es utilisablent par les utilisateurs premiums quand le bot est en mode public",
}, async (ms_org, ovl, { repondre, prenium_id }) => {
  if (!prenium_id) return repondre("‚ùå Vous n'avez pas la permission d'ex√©cuter cette commande.");

  const all = await list_cmd("private");
  if (!all.length) return repondre("‚ùå Aucune commande priv√©e enregistr√©e.");

  const msg = all.map((c, i) => `üîπ *${i + 1}.* ${c.nom_cmd}`).join("\n");
  repondre(`üîí *Commandes priv√©es enregistr√©es :*\n\n${msg}`);
});


ovlcmd(
  {
    nom_cmd: "chatbot",
    classe: "Owner",
    react: "ü§ñ",
    desc: "Active ou d√©sactive le chatbot ici ou globalement.",
  },
  async (jid, ovl, cmd_options) => {
    const { ms, repondre, arg, verif_Groupe, prenium_id } = cmd_options;
    const sousCommande = arg[0]?.toLowerCase();

    if (!prenium_id) {
      repondre("‚ùå Pas autoris√©.");
      return;
    }

    try {
      const [config] = await ChatbotConf.findOrCreate({
        where: { id: '1' },
        defaults: {
          chatbot_pm: 'non',
          chatbot_gc: 'non',
          enabled_ids: JSON.stringify([]),
        },
      });

      let ids = [];
      try {
        ids = JSON.parse(config.enabled_ids || '[]');
      } catch {
        ids = [];
      }

      if (sousCommande === 'on') {
        if (ids.includes(jid)) {
          repondre("üîÅ Le chatbot est *d√©j√† activ√© ici*.");
        } else {
          ids.push(jid);
          config.enabled_ids = JSON.stringify([...new Set(ids)]);
          config.chatbot_pm = 'non';
          config.chatbot_gc = 'non';
          await config.save();
          repondre("‚úÖ Le chatbot est maintenant activ√© *dans cette discussion*.");
        }

      } else if (sousCommande === 'off') {
        config.chatbot_pm = 'non';
        config.chatbot_gc = 'non';
        config.enabled_ids = JSON.stringify([]);
        await config.save();
        repondre("‚õîÔ∏è Le chatbot est maintenant d√©sactiv√© *partout*.");

      } else if (['pm', 'gc', 'all'].includes(sousCommande)) {
        config.chatbot_pm = sousCommande === 'pm' || sousCommande === 'all' ? 'oui' : 'non';
        config.chatbot_gc = sousCommande === 'gc' || sousCommande === 'all' ? 'oui' : 'non';
        config.enabled_ids = JSON.stringify([]);
        await config.save();

        const messages = {
          pm: "‚úÖ Le chatbot est maintenant activ√© *dans tous les chats priv√©s*.",
          gc: "‚úÖ Le chatbot est maintenant activ√© *dans tous les groupes*.",
          all: "‚úÖ Le chatbot est maintenant activ√© *partout*.",
        };

        repondre(messages[sousCommande]);

      } else {
        repondre(
          "ü§ñ *Gestion du Chatbot*\n\n" +
          "`chatbot on` - Active ici uniquement\n" +
          "`chatbot off` - D√©sactive *partout*\n" +
          "`chatbot pm` - Active dans *tous les chats priv√©s*\n" +
          "`chatbot gc` - Active dans *tous les groupes*\n" +
          "`chatbot all` - Active *partout*"
        );
      }

    } catch (err) {
      console.error("‚ùå Erreur dans la commande chatbot :", err);
      repondre("Une erreur est survenue.");
    }
  }
);

ovlcmd({
  nom_cmd: "pglist",
  classe: "Owner",
  react: "üß©",
  desc: "Affiche la liste des plugins disponibles avec statut d'installation.",
  alias: ["pgl", "plist"]
}, async (ms, ovl, { repondre }) => {
  try {
    const { data: plugins } = await axios.get('https://pastebin.com/raw/5UA0CYYR');

    if (!Array.isArray(plugins)) {
      return repondre("‚ùå Les donn√©es re√ßues ne sont pas valides.");
    }

    const installs = await Plugin.findAll();
    const installedNames = installs.map(p => p.name.toLowerCase());

    const lignes = plugins.map((plugin, index) => {
      const estInstalle = installedNames.includes(plugin.name.toLowerCase());
      const icone = estInstalle ? "‚úÖ" : "‚ùå";

      return (
`*${icone} Plugin #${index + 1}*
üß© *Nom:* ${plugin.name}
üë§ *Auteur:* ${plugin.author}
üì¶ *Install√©:* ${estInstalle ? "Oui ‚úÖ" : "Non ‚ùå"}
üîó *Lien:* ${plugin.url}
üìù *Description:* ${plugin.description || "Aucune description"}`
      );
    });

    const message = lignes.length > 0
      ? "üì¶ *Plugins disponibles :*\n\n" + lignes.join("\n\n")
      : "‚ùå Aucun plugin disponible.";

    await repondre(message);
  } catch (e) {
    console.error("Erreur pluginlist :", e);
    await repondre("‚ùå Une erreur est survenue lors du chargement des plugins.");
  }
});


ovlcmd({
¬† nom_cmd: "pgremove",
¬† classe: "Owner",
¬† react: "üóëÔ∏è",
¬† desc: "Supprime un plugin install√© par nom ou tape `remove all` pour tous.",
  alias: ["pgr"]
}, async (ms, ovl, { arg, repondre }) => {
¬† const input = arg[0];
¬† if (!input) return repondre("‚ùå Utilise `remove nom_plugin` ou `remove all`.");

¬† if (input === 'all') {
¬† ¬† const plugins = await Plugin.findAll();
¬† ¬† for (const p of plugins) {
¬† ¬† ¬† const filePath = path.join(__dirname, '../cmd', `${p.name}.js`);
¬† ¬† ¬† if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
¬† ¬† ¬† await Plugin.destroy({ where: { name: p.name } });
¬† ¬† }
¬† ¬† repondre("üóëÔ∏è Tous les plugins ont √©t√© supprim√©s.");
¬† ¬† return exec('pm2 restart all', () => {});
¬† }

¬† const plugin = await Plugin.findOne({ where: { name: input } });
¬† if (!plugin) return repondre("‚ùå Plugin non trouv√© dans la base.");

¬† const filePath = path.join(__dirname, '../cmd', `${plugin.name}.js`);
¬† if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
¬† await Plugin.destroy({ where: { name: input } });

¬† await repondre(`üóëÔ∏è Plugin *${input}* supprim√©.`);
¬† return exec('pm2 restart all', () => {});
});

ovlcmd({
  nom_cmd: "pginstall",
  classe: "Owner",
  react: "üì•",
  desc: "Installe un plugin.",
  alias: ["pgi"]
}, async (ms, ovl, { arg, repondre }) => {
  const input = arg[0];
  if (!input) return repondre("‚ùå Donne un lien direct vers un plugin ou tape `pginstall all` pour tout installer.");

  const installOne = async (url, name) => {
    try {
      const exist = await Plugin.findOne({ where: { name } });
      if (exist) {
        await repondre(`‚ö†Ô∏è Plugin *${name}* d√©j√† install√©. Ignor√©.`);
        return;
      }

      const res = await axios.get(url);
      const code = res.data;
      const filePath = path.join(__dirname, "../cmd", `${name}.js`);
      fs.writeFileSync(filePath, code);

      const modules = extractNpmModules(code);
      if (modules.length > 0) {
        await repondre(`‚öôÔ∏è Installation des d√©pendances npm : ${modules.join(", ")}`);
        await installModules(modules);
      }

      await Plugin.findOrCreate({ where: { name }, defaults: { url } });
      await repondre(`‚úÖ Plugin *${name}* install√© avec succ√®s.`);
      exec('pm2 restart all', () => {});
    } catch (e) {
      await repondre(`‚ùå Erreur installation *${name}* : ${e.message}`);
    }
  };

  if (input === "all") {
    try {
      const { data: plugins } = await axios.get("https://pastebin.com/raw/5UA0CYYR");
       
      const installed = await Plugin.findAll();
      const installedNames = installed.map(p => p.name.toLowerCase());

      const pluginsToInstall = plugins.filter(p => !installedNames.includes(p.name.toLowerCase()));

      if (pluginsToInstall.length === 0) {
        return await repondre("‚úÖ Tous les plugins sont d√©j√† install√©s.");
      }

      for (const p of pluginsToInstall) {
        await installOne(p.url, p.name);
      }

      await repondre("‚úÖ Installation termin√©e pour tous les plugins disponibles.");
    } catch (e) {
      await repondre(`‚ùå Erreur de r√©cup√©ration des plugins : ${e.message}`);
    }
  } else {
    const url = input;
    const name = path.basename(url).replace(".js", "");
    await installOne(url, name);
  }
});
