const { ovlcmd, cmd } = require("../lib/ovlcmd");
const axios = require('axios');
const gis = require("g-i-s");
const wiki = require('wikipedia');
const { Sticker, StickerTypes } = require("wa-sticker-formatter");
const config = require('../set');
const { translate } = require('@vitalets/google-translate-api');
const ytsr = require('@distube/ytsr');
const LyricsFinder = require('@faouzkk/lyrics-finder');
const { search, download } = require("aptoide_scrapper_fixed");
const FormData = require('form-data');
const shazam = require("../lib/shazam");

ovlcmd(
    {
        nom_cmd: "img",
        classe: "Search",
        react: "üîç",
        desc: "Recherche d'images"
    },
    async (ms_org, ovl, cmd_options) => {
      const { arg, ms } = cmd_options;
        const searchTerm = arg.join(" ");
        if (!searchTerm) {
            return ovl.sendMessage(ms_org, { text: "Veuillez fournir un terme de recherche, par exemple : img ovl-Md" },  { quoted: ms });
        }

        gis(searchTerm, async (error, results) => {
            if (error) {
                console.error("Erreur lors de la recherche d'images:", error);
                return ovl.sendMessage(ms_org, { text: "Erreur lors de la recherche d'images." }, { quoted: ms });
            }

            const images = results.slice(0, 5);
            if (images.length === 0) {
                return ovl.sendMessage(ms_org, { text: "Aucune image trouv√©e pour ce terme de recherche." }, { quoted: ms });
            }

            for (const image of images) {
                try {
                    await ovl.sendMessage(ms_org, {
                        image: { url: image.url },
                        caption: `\`\`\`Powered By OVL-MD\`\`\``
                    }, { quoted: ms });
                } catch (err) {
                    console.error("Erreur lors de l'envoi de l'image:", err);
                }
            }
        });
    }
);

ovlcmd(
    {
        nom_cmd: "lyrics",
        classe: "Search",
        react: "üéµ",
        desc: "Cherche les paroles d'une chanson"
    },
    async (ms_org, ovl, cmd_options) => {
        const { arg, ms } = cmd_options;
        const songName = arg.join(" ");
        if (!songName) {
            return ovl.sendMessage(ms_org, { text: "Veuillez fournir un nom de chanson pour obtenir les paroles." }, { quoted: ms });
        }

        try {
            const lyrics = await LyricsFinder(songName);
            const mess = `üé∏OVL-MD LYRICS FINDERü•Å\n\nüéºPAROLES =>\n\n${lyrics}`;
            if (!lyrics) {
                return ovl.sendMessage(ms_org, { text: "D√©sol√©, je n'ai pas trouv√© les paroles pour cette chanson." }, { quoted: ms });
            }
            await ovl.sendMessage(ms_org, { text: mess }, {quoted: ms});
        } catch (error) {
            console.error("Erreur lors de la recherche des paroles :", error.message);
            ovl.sendMessage(ms_org, { text: "Une erreur s'est produite lors de la recherche des paroles." }, { quoted: ms });
        }
    }
);

/*ovlcmd(
  {
    nom_cmd: "shazam",
    desc: "Identifie une chanson via un message audio.",
    react: "üé∂"
  },
  async (ms_org, ovl, { repondre, ms, msg_Repondu }) => {
    if (!msg_Repondu || !msg_Repondu.audioMessage) {
      return repondre("üéß R√©ponds √† un *message audio* pour identifier la musique.");
    }

    const aud = await ovl.dl_save_media_ms(msg_Repondu.audioMessage);
    const resultat = await shazam(aud);

    if (resultat.erreur) {
      return repondre(`‚ùå ${resultat.erreur}`);
    }

    // Format d√©cor√© avec liens inclus
    let msg = `‚ï≠‚îÄ‚îÄüéµ *Musique Identifi√©e* ‚îÄ‚îÄ‚ïÆ\n`;
    msg += `‚îÇ üè∑Ô∏è *Titre* : ${resultat.titre}\n`;
    msg += `‚îÇ üë§ *Artiste* : ${resultat.artiste}\n`;
    if (resultat.album) msg += `‚îÇ üíΩ *Album* : ${resultat.album}\n`;
    if (resultat.genres) msg += `‚îÇ üéß *Genre* : ${resultat.genres}\n`;
    if (resultat.duree) msg += `‚îÇ ‚è±Ô∏è *Dur√©e* : ${resultat.duree}\n`;
    if (resultat.date) msg += `‚îÇ üìÖ *Sortie* : ${resultat.date}\n`;
    if (resultat.label) msg += `‚îÇ üè¢ *Label* : ${resultat.label}\n`;
    msg += `‚îÇ üéØ *Score* : ${resultat.score}%\n`;
    
    if (resultat.spotify) msg += `‚îÇ üü¢ Spotify : ${resultat.spotify}\n`;
    if (resultat.youtube) msg += `‚îÇ üî¥ YouTube : https://youtu.be/${resultat.youtube}\n`;
    if (resultat.deezer) msg += `‚îÇ üîµ Deezer : ${resultat.deezer}\n`;
    if (resultat.apple) msg += `‚îÇ üçé Apple Music : ${resultat.apple}\n`;

    msg += `‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;

    return repondre(msg);
  }
);*/

ovlcmd(
    {
        nom_cmd: "google",
        classe: "Search",
        desc: "Recherche sur Google.",
        alias: ["search"],
    },
    async (ms_org, ovl, cmd_options) => {
        const { arg, ms } = cmd_options;
        if (!arg[0]) {
            return await ovl.sendMessage(ms_org, { text: "‚ùó Entrez un terme √† rechercher sur Google." }, { quoted: ms });
        }

        const searchTerm = arg.join(" ");
        try {
            const response = await axios.get(
                `https://www.googleapis.com/customsearch/v1`,
                {
                    params: {
                        q: searchTerm,
                        key: "AIzaSyDMbI3nvmQUrfjoCJYLS69Lej1hSXQjnWI",
                        cx: "baf9bdb0c631236e5",
                    },
                }
            );

            if (!response.data.items || response.data.items.length === 0) {
                return await ovl.sendMessage(ms_org, {
                    text: "‚ùó Aucun r√©sultat trouv√© pour cette recherche.",
                }, { quoted: ms });
            }

            const results = response.data.items.slice(0, 3); // Limiter √† 3 r√©sultats

            let searchResultsMsg = `*üîç R√©sultats de recherche pour : ${searchTerm}*\n\n`;
            results.forEach((result, index) => {
                searchResultsMsg += `${index + 1}.\n *üìåTitre:* ${result.title}\n*üìÉDescription:* ${result.snippet}\n*üåêLien:* ${result.link}\n\n`;
            });

            await ovl.sendMessage(ms_org, { text: searchResultsMsg }, { quoted: ms });
        } catch (error) {
            console.error("Erreur dans la recherche Google :", error);
            await ovl.sendMessage(ms_org, {
                text: "‚ùó Une erreur est survenue lors de la recherche sur Google. Veuillez r√©essayer.",
            }, { quoted: ms });
        }
    }
);

ovlcmd(
    {
        nom_cmd: "wiki",
        classe: "Search",
        react: "üìñ",
        desc: "Recherche sur Wikip√©dia.",
    },
    async (ms_org, ovl, cmd_options) => {
        const { arg, ms } = cmd_options;
        if (!arg[0]) {
            return await ovl.sendMessage(ms_org, { text: "‚ùó Entrez un terme √† rechercher sur Wikip√©dia." }, { quoted: ms });
        }

        const searchTerm = arg.join(" ");
        try {
            const con = await wiki.summary(searchTerm);

            const mess = `*üìñWikip√©dia :*\n\n*üìåTitre:* ${con.title}\n\n*üìÉDescription:* ${con.description}\n\n*üìÑR√©sum√©:* ${con.extract}\n\n*üåêLien:* ${con.content_urls.mobile.page}`;

            await ovl.sendMessage(ms_org, { text: mess }, { quoted: ms });
        } catch (error) {
            console.error("Erreur dans la recherche Wikip√©dia :", error);
            await ovl.sendMessage(ms_org, {
                text: "‚ùó Une erreur est survenue lors de la recherche sur Wikip√©dia. Veuillez r√©essayer.",
            }, { quoted: ms });
        }
    }
);

ovlcmd(
    {
        nom_cmd: "github",
        classe: "Search",
        react: "üîç",
        desc: "R√©cup√®re les informations d'un utilisateur GitHub"
    },
    async (ms_org, ovl, cmd_options) => {
        const { arg, ms } = cmd_options;
        const username = arg.join(" ");

        if (!username) {
            return ovl.sendMessage(ms_org, { text: "‚ùó Veuillez fournir un nom d'utilisateur GitHub √† rechercher." }, { quoted: ms });
        }

        try {
            const response = await axios.get(`https://api.github.com/users/${encodeURIComponent(username)}`);
            const data = response.data;

            const message = `*üë§ Nom d'utilisateur :* ${data.login}\n`
                + `*üìõ Nom affich√© :* ${data.name || "Non sp√©cifi√©"}\n`
                + `*üìù Bio :* ${data.bio || "Aucune bio"}\n`
                + `*üè¢ Entreprise :* ${data.company || "Non sp√©cifi√©e"}\n`
                + `*üìç Localisation :* ${data.location || "Non sp√©cifi√©e"}\n`
                + `*üîó Lien :* ${data.html_url}\n`
                + `*üë• Followers :* ${data.followers}\n`
                + `*üë§ Following :* ${data.following}\n`
                + `*üì¶ Repos publics :* ${data.public_repos}\n`
                + `*üï∞Ô∏è Cr√©√© le :* ${data.created_at.split("T")[0]}`;

            if (data.avatar_url) {
                await ovl.sendMessage(ms_org, { image: { url: data.avatar_url }, caption: message }, { quoted: ms });
            } else {
                await ovl.sendMessage(ms_org, { text: message }, { quoted: ms });
            }

        } catch (error) {
            console.error("Erreur lors de la r√©cup√©ration des donn√©es GitHub :", error.message);
            ovl.sendMessage(ms_org, { text: "‚ùó Impossible de r√©cup√©rer les donn√©es GitHub.\n" + error.message }, { quoted: ms });
        }
    }
);

ovlcmd(
    {
        nom_cmd: "imdb",
        classe: "Search",
        react: "üé¨",
        desc: "Recherche des informations sur un film ou une s√©rie via IMDB"
    },
    async (ms_org, ovl, cmd_options) => {
        const { arg, ms } = cmd_options;
        const movieName = arg.join(" ");

        if (!movieName) {
            return ovl.sendMessage(ms_org, { text: "‚ùó Veuillez fournir un nom de film ou de s√©rie √† rechercher." },  { quoted: ms });
        }

        try {
            const response = await axios.get(`http://www.omdbapi.com/?apikey=742b2d09&t=${encodeURIComponent(movieName)}&plot=full&lang=fr`);
            const data = response.data;

            if (data.Response === "False") {
                return ovl.sendMessage(ms_org, { text: "‚ùó Impossible de trouver ce film ou cette s√©rie." },  { quoted: ms });
            }

            const trt_synopsis = await translate(data.Plot, { to: 'fr' }).then(res => res.text).catch(() => data.Plot);
            const trt_langue = await translate(data.Language, { to: 'fr' }).then(res => res.text).catch(() => data.Language);
            const trt_pays = await translate(data.Country, { to: 'fr' }).then(res => res.text).catch(() => data.Country);
            const trt_rec = await translate(data.Awards, { to: 'fr' }).then(res => res.text).catch(() => data.Awards);
            
            const imdbInfo = `‚öç‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öç\n`
                + `üé¨ *IMDB MOVIE SEARCH*\n`
                + `‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé‚öé\n`
                + `*üéûÔ∏è Titre :* ${data.Title}\n`
                + `*üìÖ Ann√©e :* ${data.Year}\n`
                + `*‚≠ê Classement :* ${data.Rated}\n`
                + `*üìÜ Sortie :* ${data.Released}\n`
                + `*‚è≥ Dur√©e :* ${data.Runtime}\n`
                + `*üåÄ Genre :* ${data.Genre}\n`
                + `*üë®üèª‚Äçüíª R√©alisateur :* ${data.Director}\n`
                + `*‚úç Sc√©nariste :* ${data.Writer}\n`
                + `*üë® Acteurs :* ${data.Actors}\n`
                + `*üìÉ Synopsis :* ${trt_synopsis}\n`
                + `*üåê Langue :* ${trt_langue}\n`
                + `*üåç Pays :* ${trt_pays}\n`
                + `*üéñÔ∏è R√©compenses :* ${trt_rec || "Aucune"}\n`
                + `*üì¶ Box-office :* ${data.BoxOffice || "Non disponible"}\n`
                + `*üèôÔ∏è Production :* ${data.Production || "Non sp√©cifi√©e"}\n`
                + `*üåü Note IMDb :* ${data.imdbRating} ‚≠ê\n`
                + `*‚ùé Votes IMDb :* ${data.imdbVotes}`;

            if (data.Poster && data.Poster !== "N/A") {
                await ovl.sendMessage(ms_org, { image: { url: data.Poster }, caption: imdbInfo }, { quoted: ms });
            } else {
                await ovl.sendMessage(ms_org, { text: imdbInfo }, { quoted: ms });
            }

        } catch (error) {
            console.error("Erreur lors de la r√©cup√©ration des donn√©es IMDB :", error.message);
            ovl.sendMessage(ms_org, { text: "‚ùó Une erreur s'est produite lors de la recherche du film.\n" + error.message }, { quoted: ms });
        }
    }
);

ovlcmd(
  {
    nom_cmd: "stickersearch",
    classe: "Search",
    react: "üñºÔ∏è",
    desc: "Recherche et envoie des stickers anim√©s bas√©s sur un mot-cl√©.",
    alias: ["sstick"]
  },
  async (ms_org, ovl, cmd_options) => {
    const { arg, auteur_Message, ms} = cmd_options;
    
    if (!arg.length) {
      return ovl.sendMessage(ms_org, { text: "Veuillez fournir un terme de recherche pour le sticker !" }, { quoted: ms });
    }
      
    const tenorApiKey = "AIzaSyCyouca1_KKy4W_MG1xsPzuku5oa8W358c";
    const searchTerm = encodeURIComponent(arg.join(" "));

    try {
      const response = await axios.get(
        `https://tenor.googleapis.com/v2/search?q=${searchTerm}&key=${tenorApiKey}&client_key=my_project&limit=8&media_filter=gif`
      );
      
      const stickers = response.data.results;
      if (!stickers.length) {
        return ovl.sendMessage(ms_org, { text: "Aucun sticker trouv√© pour cette recherche." }, { quoted: ms });
      }

      for (let i = 0; i < Math.min(8, stickers.length); i++) {
        const gifUrl = stickers[i].media_formats.gif.url;
        const sticker = new Sticker(gifUrl, {
          pack: config.STICKER_PACK_NAME,
          author: config.STICKER_AUTHOR_NAME,
          type: StickerTypes.FULL,
          categories: ["ü§©", "üéâ"],
          id: "12345",
          quality: 60,
          background: "transparent",
        });

        const stickerBuffer = await sticker.toBuffer();
        await ovl.sendMessage(ms_org, { sticker: stickerBuffer },  { quoted: ms });
      }
    } catch (error) {
      console.error(error);
      ovl.sendMessage(ms_org, { text: "Une erreur s'est produite lors de la r√©cup√©ration des stickers." },  { quoted: ms });
    }
  }
);

ovlcmd(
  {
    nom_cmd: "meteo",
    classe: "Search",
    react: "üå¶Ô∏è",
    desc: "Affiche la m√©t√©o d'une ville.",
  },
  async (ms_org, ovl, cmd_options) => {
    const { arg, ms } = cmd_options;
    const cityName = arg.join(" ");

    if (!cityName) {
      return ovl.sendMessage(ms_org, { text: "‚ùó Veuillez fournir un nom de ville." }, { quoted: ms });
    }

    try {
      const apiKey = "1ad47ec6172f19dfaf89eb3307f74785";
      const url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(cityName)}&units=metric&appid=${apiKey}`;

      const response = await axios.get(url);
      const data = response.data;

      const city = data.name;
      const country = data.sys.country;
      const temperature = data.main.temp;
      const feelsLike = data.main.feels_like;
      const minTemperature = data.main.temp_min;
      const maxTemperature = data.main.temp_max;
      const description = data.weather[0].description;
      const humidity = data.main.humidity;
      const windSpeed = data.wind.speed;
      const rainVolume = data.rain ? data.rain["1h"] || 0 : 0;
      const cloudiness = data.clouds.all;
      const sunrise = new Date(data.sys.sunrise * 1000);
      const sunset = new Date(data.sys.sunset * 1000);

      // Formatage des heures de lever et coucher du soleil (juste h:min:s)
      const formatTime = (date) => {
        const hours = date.getUTCHours().toString().padStart(2, '0');
        const minutes = date.getUTCMinutes().toString().padStart(2, '0');
        const seconds = date.getUTCSeconds().toString().padStart(2, '0');
        return `${hours}:${minutes}:${seconds}`;
      };

      const formattedSunrise = formatTime(sunrise);
      const formattedSunset = formatTime(sunset);

      const weatherMessage = `üåç *M√©t√©o √† ${city}, ${country}*  

üå°Ô∏è *Temp√©rature :* ${temperature}¬∞C  
üå°Ô∏è *Ressenti :* ${feelsLike}¬∞C  
üìâ *Temp√©rature min :* ${minTemperature}¬∞C  
üìà *Temp√©rature max :* ${maxTemperature}¬∞C  
üìù *Description :* ${description.charAt(0).toUpperCase() + description.slice(1)}  
üíß *Humidit√© :* ${humidity}%  
üí® *Vent :* ${windSpeed} m/s  
üåßÔ∏è *Pr√©cipitations (1h) :* ${rainVolume} mm  
‚òÅÔ∏è *N√©bulosit√© :* ${cloudiness}%  
üåÑ *Lever du soleil (GMT) :* ${formattedSunrise}  
üåÖ *Coucher du soleil (GMT) :* ${formattedSunset}`;

      await ovl.sendMessage(ms_org, { text: weatherMessage },  { quoted: ms });
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration des donn√©es m√©t√©o :", error.message);
      await ovl.sendMessage(ms_org, { text: "‚ùó Impossible de trouver cette ville. V√©rifiez l'orthographe et r√©essayez !" }, { quoted: ms });
    }
  }
);

ovlcmd(
  {
    nom_cmd: "anime",
    classe: "Search",
    react: "üì∫",
    desc: "Recherche un anime al√©atoire avec un r√©sum√© et un lien vers MyAnimeList."
  },
  async (ms_org, ovl, cmd_options) => {
   
    const link = "https://api.jikan.moe/v4/random/anime";

    try {
      const response = await axios.get(link);
      const data = response.data.data;

      const title = data.title;
      let synopsis = data.synopsis;
      const imageUrl = data.images.jpg.image_url;
      const episodes = data.episodes;
      const status = data.status;

      const trts = await translate(synopsis, { to: 'fr' }).then(res => res.text).catch(() => synopsis);
      const trt_status = await translate(status, { to: 'fr' }).then(res => res.text).catch(() => status);
    
        const message = `‚ú® *ANIME AL√âATOIRE* ‚ú®\n\n` +
          `üì∫ *Titre* : ${title}\n` +
          `üé¨ *√âpisodes* : ${episodes}\n` +
          `üì° *Statut* : ${trt_status}\n` +
          `üîó *URL* : ${data.url}\n` +
          `üìù *Synopsis* : ${trts}\n`

      await ovl.sendMessage(ms_org, {
        image: { url: imageUrl },
        caption: message
      }, { quoted: cmd_options.ms });

    } catch (error) {
        console.error(error);
      ovl.sendMessage(ms_org, { text: 'Une erreur est survenue lors de la r√©cup√©ration des informations de l\'anime.' }, { quoted: cmd_options.ms });
    }
  }
);

ovlcmd(
    {
        nom_cmd: "ytsearch",
        classe: "Search",
        react: "üéµ",
        desc: "Recherche une chanson depuis YouTube avec un terme de recherche",
        alias: ['yts']
    },
    async (ms_org, ovl, cmd_options) => {
        const { arg, ms } = cmd_options;
        if (!arg.length) {
            return await ovl.sendMessage(ms_org, {
                text: "Veuillez sp√©cifier un terme de recherche.",
            }, { quoted: ms });
        }

        const query = arg.join(" ");
        try {
            const searchResults = await ytsr(query, { limit: 5 });
            if (searchResults.items.length === 0) {
                return await ovl.sendMessage(ms_org, { text: "Aucun r√©sultat trouv√©." }, { quoted: ms });
            }

            const results = searchResults.items.map((item, index) => {
                return `${index + 1}. \n*‚¨°Titre:* ${item.name}\n*‚¨°URL*: ${item.url}\n*‚¨°Vues:* ${item.views}\n*‚¨°Dur√©e:* ${item.duration}\n\n`;
            }).join("\n");

            await ovl.sendMessage(ms_org, {
                text: `‚ï≠‚îÄ‚îÄ‚îÄ „Äî OVL-MD YTS „Äï ‚îÄ‚îÄ‚¨£\n${results}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚¨£`,
            }, { quoted: ms });
        } catch (error) {
            console.error("Erreur YTSearch:", error.message);
            await ovl.sendMessage(ms_org, { text: "Erreur lors de la recherche." }, { quoted: ms });
        }
    }
);


ovlcmd(
  {
    nom_cmd: "apk_search",
    classe: "Search",
    react: "üîç",
    desc: "Rechercher des applications sur Aptoide",
    alias: ["apks"],
  },  
  async (ms_org, ovl, cmd_options) => {
    const { repondre, arg, ms } = cmd_options;

    try {
      const appName = arg.join(' ');
      if (!appName) {
        return repondre("*Veuillez entrer le nom de l'application √† rechercher* üßê");
      }

      const searchResults = await search(appName);

      if (searchResults.length === 0) {
        return repondre("*Aucune application trouv√©e, essayez un autre nom* üòï");
      }

      const limitedResults = searchResults.slice(0, 10);

      const appDetails = await Promise.all(
        limitedResults.map(async (app) => {
          const appData = await download(app.id);
          return {
            name: app.name,
            id: app.id,
            lastup: appData.lastup,
            size: appData.size || "Inconnue",
          };
        })
      );

      let messageText = "*üîçOVL-MD APK-SEARCH:*\n\n";
      appDetails.forEach((app, index) => {
        messageText += `üì± *${index + 1}. Nom:* ${app.name}\nüÜî *ID:* ${app.id}\nüìÖ *Derni√®re mise √† jour:* ${app.lastup}\nüì¶ *Taille:* ${app.size}\n\n`;
      });

      repondre(messageText);
    } catch (error) {
      console.error('Erreur lors de la recherche des applications :', error);
      repondre("*Erreur lors du traitement de la commande apk_search* ‚ö†Ô∏è");
    }
  }
);
